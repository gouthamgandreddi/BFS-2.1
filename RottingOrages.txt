class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
        int freshOranges = 0;
        Queue<int[]> queue = new LinkedList<>();
        for(int i=0;i<m ; i++){
            for(int j=0; j<n ;j++){
                if(grid[i][j] == 2) queue.add(new int[]{i,j});
                else if(grid[i][j] == 1) freshOranges++;
            }
        }

        if(freshOranges == 0) return 0;

        int elapsedTime = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            while(size > 0){
                int[] curr = queue.poll();

                for(int[] dir : dirs){
                    int r = curr[0] + dir[0];
                    int c = curr[1] + dir[1];
                    if( r >= 0 && r< m && c >=0 && c <n && grid[r][c] == 1){
                        freshOranges--;
                        grid[r][c] = 2;
                        queue.add(new int[]{r, c});
                    }
                }
                size--;
            }
            elapsedTime++;
        }
        return (freshOranges == 0) ? elapsedTime-1 : -1;
    }
}